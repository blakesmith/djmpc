#!/usr/bin/env python

import djmpclib.mpd as mpd
import djmpclib.cuesheet as cuesheet
import djmpclib.gui as gui
import djmpclib.objects as objects
import sys
import os
import math
import curses
import time
from djmpclib.exceptions import *

try:
    sys.path.append(os.path.join(os.environ.get('HOME'), '.djmpc'))
    from djmpc_config import *
except:
    try:
        sys.path.append('/usr/share/djmpc')
        from djmpc_config import *
    except: 
        raise ConfigError("Unable to open djmpc_config.py in either '/usr/share/djmpc' or '$HOME/.djmpc'. Are you sure they're present and readable?")

class MpdControl(object):
    """Main object to control mpd through the mpd library. Methods here are what interact directly with the server."""
    
    def __init__(self):
        self.client = mpd.MPDClient()

    def client_init(self):
        """Things that should be loaded, started or run when the client first starts."""
        song_info.current_track = objects.Track(self.client.currentsong())
        self.event_factory = objects.EventFactory()
        self.status_update()
        try:
            song_info.current_track.update_current_time(self.current_status['time'])
        except:
            song_info.current_track.update_current_time(0)
        if not self.server_is_stopped():
            cue_control.cue_init()

    def status_update(self):
        """Current statuses that are updated each iteration of the main loop."""
        self.event_factory.update_all()
        try:
            self.current_status = control.client.status()
            if song_info.current_track:
                song_info.current_track.update_current_time(self.current_status['time'])
            return True
        except:
            return False

    def client_connect(self):
        """Initialize the connection to the server."""
        try:
            self.client.connect(mpd_address, mpd_port)
            return True
        except:
            return False

    def client_disconnect(self):
        """Disconnect function."""
        try:
            self.client.disconnect()
        except:
            raise ConnectionError("Can't disconnect, are you sure you're connected?")

    def client_reconnect(self):
        while not self.status_update():
            try:
                control.client_disconnect()
                control.client_connect()
            except:
                control.client_connect()

    def toggle(self):
        """If the server is playing, pause it. If the server is paused, play it."""
        try:
            if self.client.status()['state'] == "play":
                self.client.pause()
            else:
                self.client.play()
        except:
            raise ConnectionError("You aren't connected, you must connect first.")

    def cue_list(self):
        """Pretty printout of the current cuesheet. Invoked from the command line using 'cuelist'."""
        self.client_init()
        if cue_control.cue_init():
            for i in song_info.current_track.cuesheet.parsed:
                print("[%s] %i: %s - %s at %s" % (i['length'], i['track'], i['performer'], i['title'], i['index']))
        else:
            print("No cuesheet found for the current song")

    def seek(self, seek_string):
        """Seeks within the current track, either by an integer, or by a properly formatted string. eg: '19:32'"""
        self.client_init()
        current_id = song_info.current_track.id
        try:
            seek_string = int(seek_string)
            if isinstance(seek_string, int):
                self.client.seekid(current_id, seek_string)
        except:
            string_split = seek_string.rsplit(":")
            if len(string_split) == 2:
                string_split.append(0)
                int_split = []
                for i in string_split:
                    int_split.append(int(i))
                int_split = cuesheet.Index(int_split)
                self.client.seekid(current_id, int_split.to_seconds())
            else:
                raise InputError("Malformed seek time. Try 'minutes:seconds' or just 'seconds'")

    def cue_seek(self, track_string):
        """Seeks to a track number within a cue."""
        self.client_init()
        if not self.server_is_stopped():
            current_id = song_info.current_track.id
        if cue_control.cue_init():
            try:
                track_int = int(track_string)
            except:
                raise InputError("Not a valid track number!")
            for i in song_info.current_track.cuesheet.parsed:
                if i['track'] == int(track_int):
                    self.client.seekid(current_id, i['index'].to_seconds()) 
                    display_song_info()
                    break
        else:
            print("No cuesheet found for the current song")

    def random(self):
        """Enable or disable random."""
        try:
            if self.client.status()['random'] == "1":
                self.client.random(0)
            else:
                self.client.random(1)
            self.client_disconnect()
        except:
            raise ConnectionError("You aren't connected, you must connect first.")

    def repeat(self):
        """Enable or disable repeat."""
        try:
            if self.client.status()['repeat'] == "1":
                self.client.repeat(0)
            else:
                self.client.repeat(1)
            self.client_disconnect()
        except:
            raise ConnectionError("You aren't connected, you must connect first.")

    def setvol(self, vol):
        """Wrapper to set the volume on the server."""
        try:
            vol = int(vol)
            if vol < 0: 
                self.client.setvol(0)
            if vol > 100:
                self.client.setvol(100)
            else:
                self.client.setvol(vol)
        except: 
            raise InputError("Not a valid volume range!")

    def track_has_changed(self):
        """See if the playing track has ended and another has begun."""
        if self.track_has_started_or_stopped():
            return True
        elif not self.server_is_stopped():
            try:
                if control.client.currentsong()['file'] == song_info.current_track.current_song['file']:
                    return False
                else:
                    return True
            except:
                control.client_reconnect() #Server has died

    def track_has_started_or_stopped(self):
        """See if the user goes from the 'stop' state to the 'play' state, or visa-versa."""
        try:
            if control.current_status['state'] == 'play' and control.client.status()['state'] == 'pause':
                return False # Go from play to pause
            if control.current_status['state'] == 'pause' and control.client.status()['state'] == 'play':
                return False # Go from pause to play
            if control.current_status['state'] == control.client.status()['state']:
                return False
            else:
                return True
        except:
            control.client_reconnect() #Server has died.

    def server_is_stopped(self):
        """Polls the server to see if it's stopped. If it is, return True, otherwise return False."""
        if control.current_status['state'] == 'stop':
            return True
        else:
            return False

class SongInfo(object):
    """Object to control all functions associated with song information."""

    def gather_song_info(self):
        """Gathers all the current song info to be displayed as a dictionary. If a cuesheet exists, add that as well."""
        gathered_song_info = []
        if song_info.current_track.has_cuesheet():
            self.cue_information = cue_control.cue_update()
            gathered_song_info.append("[CUE Track %s.] %s - %s" % (self.cue_information[0], self.cue_information[1], self.cue_information[2]))
            gathered_song_info.append("%s / %s [%s%%]" % (self.cue_information[4], self.cue_information[3], int(self.cue_information[4].percentage(self.cue_information[3]))))
        gathered_song_info.append(song_info.current_track.get_track_titles())
        gathered_song_info.append("random: %s repeat: %s" % (song_info.random_status(), song_info.repeat_status()))
        gathered_song_info.append("state: %s volume: %s" % (control.current_status['state'], control.current_status['volume']))
        if not control.server_is_stopped():
            gathered_song_info.append("bitrate: %s" % song_info.bitrate_status())
            if song_info.current_track.current_time:
                gathered_song_info.append("%s / %s [%s%%]" % (song_info.current_track.current_time, song_info.current_track.total_time, int(song_info.current_track.current_time.percentage(song_info.current_track.total_time))))
        return gathered_song_info

    def repeat_status(self):
        """Is repeat enabled?"""
        if control.current_status['repeat'] == "1":
             return "on"
        else:
             return "off"

    def random_status(self):
        """Is random enabled?"""
        if control.current_status['random'] == "1":
            return "on"
        else:
            return "off"

    def bitrate_status(self):
        """Poll for current bitrate."""
        if not control.server_is_stopped():
            return control.current_status['bitrate']
        else:
            return 0

class CueControl(object):
    """Object to control the functions associated with cuesheet reading."""

    def __init__(self):
        self.music_directory = music_directory
        self.cue_directory = cue_directory

    def cue_init(self):
        """Checks to see if a cuesheet has been loaded into memory already. If no, checks to see if the current track has a cuesheet visible in the filesystem. If so returns True. Otherwise returns false."""
        if not control.server_is_stopped():
            if song_info.current_track.has_cuesheet(): #Is something loaded into memory?
                return True
            if self.cue_load(song_info.current_track.current_song['file']): #Does a cuesheet exist for the currently playing file, if so, is it loaded?
                return True
            else:
                return False
        else:
            return False

    def cue_load(self, path):
        """Handles the actual file handling of opening and storing the contents of the cuesheet in memory."""
        if not song_info.current_track.has_cuesheet(): # Has a cuesheet been loaded into memory?
            path = os.path.splitext(path)[0] + ".cue"
            local = os.path.join(self.music_directory, path)
            remote = os.path.join(self.cue_directory, path)
            if os.path.exists(local):
                song_info.current_track.cuesheet = cuesheet.Cuesheet()
                song_info.current_track.cuesheet.open(local, song_info.current_track.total_time)
                song_info.current_track.artist = song_info.current_track._get_artist()
                song_info.current_track.title = song_info.current_track._get_title()
                return True
            elif os.path.exists(remote):
                song_info.current_track.cuesheet = cuesheet.Cuesheet()
                song_info.current_track.cuesheet.open(remote, song_info.current_track.total_time)
                song_info.current_track.artist = song_info.current_track._get_artist()
                song_info.current_track.title = song_info.current_track._get_title()
                return True
            else:
                return False #No cue file exists
        else:
            return True #Cuesheet has already been loaded into song_info.current_track.cuesheet.parsed

    def cue_update(self):
        """Function to be run every loop to see where the song is in the current cuesheet. Return the relevant information about the current location."""
        if not control.server_is_stopped():
            if song_info.current_track.has_cuesheet():
                for i in song_info.current_track.cuesheet.parsed:
                    current_index = i['index']
                    if song_info.current_track.current_time < current_index:
                        break
                    self.current_track_time = song_info.current_track.current_time - current_index
                    cue_info = (i['track'], i['performer'], i['title'], i['length'], self.current_track_time)
                return cue_info
            else:
                return "No cue has been loaded yet!"

class CursesControl(object):

    def __init__(self):
        self.window_width = curses.COLS
        self.window_length = curses.LINES - 14
        curses.curs_set(0)
        curses.halfdelay(objects.MAIN_LOOP_CYCLE_TIME)
        curses.init_pair(1, curses.COLOR_BLUE, curses.COLOR_BLUE)
        curses.init_pair(2, curses.COLOR_BLUE, curses.COLOR_BLACK)
        curses.init_pair(3, curses.COLOR_WHITE, curses.COLOR_WHITE)
        self.active_gui_objects = []
        self.progress_bar = None
        self.cue_progress_bar = None
        self.body_win = None
        self.info_win = None
        self.activate_gui_objects()

    def status_check(self):
        """Things that need to be checked or updated each iteration of the GUI loop."""
        if control.track_has_changed():
            self.track_check()
        control.status_update()

    def activate_gui_objects(self):
        """Initializes all relevant GUI objects"""
        objects = []
        song_info.gather_song_info()
        self.info_win = gui.InfoWin(curses, length=7, width=self.window_width, color_pair=1, y=0, x=0)  
        self.status_bar = gui.StatusBar(curses, length=1, width=self.window_width, color_pair=1, y=curses.LINES-1, x=1)
        self.status_bar.update()
        objects.append(self.status_bar)
        objects.append(self.info_win)
        if song_info.current_track.has_cuesheet():
            self.cue_progress_bar = gui.ProgressBar(curses, length=3, width=self.window_width, color_pair=1, y=10, x=0)
            self.cue_progress_bar.update(0)
            self.progress_bar = gui.ProgressBar(curses, length=3, width=self.window_width, color_pair=3, y=7, x=0)
            self.progress_bar.update(song_info.current_track.current_time.percentage(song_info.current_track.total_time))
            self.body_win = gui.BodyWin(curses, length=self.window_length, width=self.window_width, color_pair=1, y=13, x=0)
            self.body_win.update(song_info.cue_information[0], song_info.current_track.cuesheet.parsed)
            objects.append(self.progress_bar) 
            objects.append(self.cue_progress_bar) 
            objects.append(self.body_win) 
        elif not song_info.current_track.has_cuesheet() and not control.server_is_stopped():
            self.progress_bar = gui.ProgressBar(curses, length=3, width=self.window_width, color_pair=3, y=5, x=0)
            self.progress_bar.update(song_info.current_track.current_time.percentage(song_info.current_track.total_time))
            objects.append(self.progress_bar)
        self.active_gui_objects = objects
        return objects

    def destroy_gui_objects(self, object_list=False):
        """Destroys a list of GUI objects. If nothing is passed, destroy all relevant GUI objects."""
        if not object_list:
            object_list = self.active_gui_objects
        for object in object_list:
            object.destroy()
            object = None

    def update_gui_objects(self, object_list=False):
        """Updates a list GUI objects. If nothing is passed, update all relevant GUI objects."""
        if not object_list:
            object_list = self.active_gui_objects
        for i in object_list:
            if i == self.info_win:
                self.info_win.update(song_info.gather_song_info())
            elif i == self.progress_bar:
                self.progress_bar.update(song_info.current_track.current_time.percentage(song_info.current_track.total_time))
            elif i == self.cue_progress_bar:
                self.cue_progress_bar.update(song_info.cue_information[4].percentage(song_info.cue_information[3]))
            elif i == self.body_win:
                self.body_win.update(song_info.cue_information[0], song_info.current_track.cuesheet.parsed)
            else:
                i.update()

    def resize_window_update(self):
        self.window_width = curses.COLS
        self.window_length = curses.LINES - 14

    def track_check(self):
        """Things that need to be checked or updated if the track is switched."""
        control.status_update()
        song_info.current_track = objects.Track(control.client.currentsong())
        cue_control.cue_init() #Recheck for a new cuesheet
        self.destroy_gui_objects()
        self.activate_gui_objects()

    def user_input(self, char):
        """Handles all user input, and it's associated action."""
        if char == ord('q'):
            sys.exit()
        if char == ord('t'):
            control.toggle()     
            self.status_bar.write("toggle", 'c')
            control.event_factory.new(lambda: self.status_bar.write_default())
        if char == curses.KEY_RIGHT:
            current_volume = int(control.current_status['volume'])
            control.setvol(current_volume+1)
            curses_refresh()
        if char == curses.KEY_LEFT:
            current_volume = int(control.current_status['volume'])
            control.setvol(current_volume-1)
            curses_refresh()
        if char == curses.KEY_RESIZE:
            curses.resize_term(*control.stdscr.getmaxyx())
            control.curses_control.destroy_gui_objects()
            control.curses_control.resize_window_update()
            control.curses_control.activate_gui_objects()
            control.curses_control.update_gui_objects()
        if char == ord('j'):
            pass
        if char == ord('k'):
            pass

def display_song_info():
    """Pretty output of gather_song_info()."""
    control.client_init()
    for i in song_info.gather_song_info():
        print(i)

def display_help():
    """Invoked when user has malformed input or sends '--help'."""
    print("""Usage: djmpc <command> [command args]...
    
    djmpc nc                    Runs djmpc in ncurses mode
    djmpc cuelist               List all tracks within current cuesheet
    djmpc cueseek <track>       Seek to track within current cuesheet
    djmpc seek MM:SS            Seek to time within track
    djmpc play                  Play if paused
    djmpc pause                 Pause if playing 
    djmpc toggle                Play or Pause current track
    djmpc repeat                Turn repeat on or off
    djmpc random                Turn random on or off
    djmpc volume <num>          Set volume to <num>
    """)

def curses_refresh():
    """Called to refresh/redraw the screen. Needs an instance of CursesControl() passed to update."""
    control.stdscr.refresh()
    control.curses_control.status_check()
    user_input = control.curses_control.user_input(control.stdscr.getch())
    control.curses_control.update_gui_objects()

def curses_gui(stdscr):
    """Main loop for all curses control."""
    control.stdscr = stdscr
    control.client_init()
    control.curses_control = CursesControl()
    while True:
        curses_refresh()

if __name__ == "__main__":
    try:
        cue_control = CueControl()
        control = MpdControl()
        song_info = SongInfo()
        while not control.client_connect():
            time.sleep(1)
    except:
        print("Unable to connect to mpd server!")
    if (len(sys.argv) == 1):
        display_song_info()
    else:
        if sys.argv[1] == 'play': control.client.play()
        elif sys.argv[1] == 'pause': control.client.pause()
        elif sys.argv[1] == 'toggle': control.toggle()
        elif sys.argv[1] == 'nc': curses.wrapper(curses_gui)
        elif sys.argv[1] == 'cuelist': control.cue_list()
        elif sys.argv[1] == 'update': control.client.update()
        elif sys.argv[1] == 'random': control.random()
        elif sys.argv[1] == 'repeat': control.repeat()
        elif sys.argv[1] == 'volume': control.setvol(sys.argv[2])
        elif sys.argv[1] == 'seek': control.seek(sys.argv[2])
        elif sys.argv[1] == 'cueseek': control.cue_seek(sys.argv[2])
        else:
            display_help()
